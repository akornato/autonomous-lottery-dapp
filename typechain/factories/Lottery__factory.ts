/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundStartingBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "NewPlayer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundStartingBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "enterCurrentRound",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPayouts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[][]",
        name: "",
        type: "address[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRounds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundIndex",
        type: "uint256",
      },
    ],
    name: "getWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "payouts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundDurationInBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rounds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundIndex",
        type: "uint256",
      },
    ],
    name: "withdrawPayout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600a60035534801561001557600080fd5b5061148b806100256000396000f3fe6080604052600436106100915760003560e01c80638c65c81f116100595780638c65c81f146101915780638f972385146101ce578063998f1b80146101f9578063b21c793514610236578063fef5ae431461025f57610091565b806329652e86146100965780634129b2c9146100d35780636984d070146101105780636bf90c841461013b5780638b5b9ccc14610166575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610aff565b610269565b6040516100ca9190610f1f565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190610aff565b61028d565b6040516101079190610e60565b60405180910390f35b34801561011c57600080fd5b506101256103b0565b6040516101329190610e9d565b60405180910390f35b34801561014757600080fd5b50610150610408565b60405161015d9190610e9d565b60405180910390f35b34801561017257600080fd5b5061017b610460565b6040516101889190610e7b565b60405180910390f35b34801561019d57600080fd5b506101b860048036038101906101b39190610aff565b610535565b6040516101c59190610f1f565b60405180910390f35b3480156101da57600080fd5b506101e3610559565b6040516101f09190610f1f565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190610b2c565b61055f565b60405161022d9190610e60565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190610aff565b6105b9565b005b61026761077a565b005b6002818154811061027957600080fd5b906000526020600020016000915090505481565b60008060005b600184815481106102a7576102a6611349565b5b906000526020600020018054905081101561031757600184815481106102d0576102cf611349565b5b90600052602060002001826040516020016102ec929190610e38565b604051602081830303815290604052805190602001209150808061030f90611267565b915050610293565b5060006001848154811061032e5761032d611349565b5b90600052602060002001805490508260001c61034a91906112ba565b9050600184815481106103605761035f611349565b5b90600052602060002001818154811061037c5761037b611349565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b606060008054806020026020016040519081016040528092919081815260200182805480156103fe57602002820191906000526020600020905b8154815260200190600101908083116103ea575b5050505050905090565b6060600280548060200260200160405190810160405280929190818152602001828054801561045657602002820191906000526020600020905b815481526020019060010190808311610442575b5050505050905090565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561052c5783829060005260206000200180548060200260200160405190810160405280929190818152602001828054801561051857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104ce575b505050505081526020019060010190610484565b50505050905090565b6000818154811061054557600080fd5b906000526020600020016000915090505481565b60035481565b6001828154811061056f57600080fd5b90600052602060002001818154811061058757600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060008082815481106105cf576105ce611349565b5b9060005260206000200154905060006105e6610a21565b905080821061062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062190610eff565b60405180910390fd5b6000600285815481106106405761063f611349565b5b9060005260206000200154905060008111610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068790610edf565b60405180910390fd5b600061069b8661028d565b90506000600287815481106106b3576106b2611349565b5b90600052602060002001819055508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610707573d6000803e3d6000fd5b507f37e8063b72a944a76de602f32b82fd8c2a1c6f99564c727ffaf913c7762cd4206000600160008054905061073d919061117d565b8154811061074e5761074d611349565b5b9060005260206000200154828460405161076a93929190610f3a565b60405180910390a1505050505050565b662386f26fc100003410156107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90610ebf565b60405180910390fd5b60006107ce610a21565b9050600080805490501480610812575080600060016000805490506107f3919061117d565b8154811061080457610803611349565b5b906000526020600020015414155b156108df576000819080600181540180825580915050600190039060005260206000200160009091909190915055600160405180602001604052803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020016000909190919091509060016108b0929190610a43565b5060023490806001815401808255809150506001900390600052602060002001600090919091909150556109b4565b60018080805490506108f1919061117d565b8154811061090257610901611349565b5b90600052602060002001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460026001600280549050610982919061117d565b8154811061099357610992611349565b5b9060005260206000200160008282546109ac919061109c565b925050819055505b7f29436df7317f4d239eebfb749343ead1f182a224f56f744abd08cf86a2d9cee1600060016000805490506109e9919061117d565b815481106109fa576109f9611349565b5b90600052602060002001543334604051610a1693929190610f71565b60405180910390a150565b600060035460035443610a3491906110f2565b610a3e9190611123565b905090565b828054828255906000526020600020908101928215610abc579160200282015b82811115610abb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a63565b5b509050610ac99190610acd565b5090565b5b80821115610ae6576000816000905550600101610ace565b5090565b600081359050610af98161143e565b92915050565b600060208284031215610b1557610b1461138b565b5b6000610b2384828501610aea565b91505092915050565b60008060408385031215610b4357610b4261138b565b5b6000610b5185828601610aea565b9250506020610b6285828601610aea565b9150509250929050565b6000610b788383610bd7565b60208301905092915050565b6000610b908383610bf5565b60208301905092915050565b6000610ba88383610c04565b905092915050565b6000610bbc8383610e1a565b60208301905092915050565b610bd181611217565b82525050565b610be0816111d1565b82525050565b610bef816111d1565b82525050565b610bfe816111d1565b82525050565b6000610c0f82610fed565b610c19818561104d565b9350610c2483610fa8565b8060005b83811015610c55578151610c3c8882610b6c565b9750610c4783611019565b925050600181019050610c28565b5085935050505092915050565b6000610c6d82610ff8565b610c77818561105e565b9350610c8283610fb8565b8060005b83811015610cba57610c9782611378565b610ca18882610b84565b9750610cac83611026565b925050600181019050610c86565b5085935050505092915050565b6000610cd282611003565b610cdc8185611069565b935083602082028501610cee85610fcd565b8060005b85811015610d2a5784840389528151610d0b8582610b9c565b9450610d1683611033565b925060208a01995050600181019050610cf2565b50829750879550505050505092915050565b6000610d478261100e565b610d51818561107a565b9350610d5c83610fdd565b8060005b83811015610d8d578151610d748882610bb0565b9750610d7f83611040565b925050600181019050610d60565b5085935050505092915050565b610dab610da6826111e3565b6112b0565b82525050565b6000610dbe601f8361108b565b9150610dc98261139d565b602082019050919050565b6000610de160308361108b565b9150610dec826113c6565b604082019050919050565b6000610e0460168361108b565b9150610e0f82611415565b602082019050919050565b610e238161120d565b82525050565b610e328161120d565b82525050565b6000610e448285610c62565b9150610e508284610d9a565b6020820191508190509392505050565b6000602082019050610e756000830184610be6565b92915050565b60006020820190508181036000830152610e958184610cc7565b905092915050565b60006020820190508181036000830152610eb78184610d3c565b905092915050565b60006020820190508181036000830152610ed881610db1565b9050919050565b60006020820190508181036000830152610ef881610dd4565b9050919050565b60006020820190508181036000830152610f1881610df7565b9050919050565b6000602082019050610f346000830184610e29565b92915050565b6000606082019050610f4f6000830186610e29565b610f5c6020830185610bc8565b610f696040830184610e29565b949350505050565b6000606082019050610f866000830186610e29565b610f936020830185610be6565b610fa06040830184610e29565b949350505050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006110a78261120d565b91506110b28361120d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110e7576110e66112eb565b5b828201905092915050565b60006110fd8261120d565b91506111088361120d565b9250826111185761111761131a565b5b828204905092915050565b600061112e8261120d565b91506111398361120d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611172576111716112eb565b5b828202905092915050565b60006111888261120d565b91506111938361120d565b9250828210156111a6576111a56112eb565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111dc826111ed565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061122282611229565b9050919050565b60006112348261123b565b9050919050565b6000611246826111ed565b9050919050565b600061126061125b83611390565b6111b1565b9050919050565b60006112728261120d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112a5576112a46112eb565b5b600182019050919050565b6000819050919050565b60006112c58261120d565b91506112d08361120d565b9250826112e0576112df61131a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611384825461124d565b9050919050565b600080fd5b60008160001c9050919050565b7f4d696e696d756d206265742076616c756520697320302e303120657468657200600082015250565b7f5061796f75742068617320616c7265616479206265656e20776974686472617760008201527f6e20666f72207468697320726f756e6400000000000000000000000000000000602082015250565b7f526f756e64206e6f742066696e69736865642079657400000000000000000000600082015250565b6114478161120d565b811461145257600080fd5b5056fea2646970667358221220c0ad38c3a67c7ff98d3a953bd58b3c8c69aecc87e7d69211073d81d6bea512c764736f6c63430008060033";

export class Lottery__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
