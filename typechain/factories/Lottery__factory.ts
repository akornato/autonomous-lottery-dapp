/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    name: "enterCurrentRound",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentRoundStartingBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPayouts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[][]",
        name: "",
        type: "address[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRounds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundIndex",
        type: "uint256",
      },
    ],
    name: "getWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "payouts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundDurationInBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rounds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundIndex",
        type: "uint256",
      },
    ],
    name: "withdrawPayout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600a60035534801561001557600080fd5b506112f1806100256000396000f3fe60806040526004361061009c5760003560e01c80638b5b9ccc116100645780638b5b9ccc1461019c5780638c65c81f146101c75780638f97238514610204578063998f1b801461022f578063b21c79351461026c578063fef5ae43146102955761009c565b806329652e86146100a15780634129b2c9146100de5780636984d0701461011b5780636bf90c841461014657806371f47d8314610171575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610aaa565b61029f565b6040516100d59190610e78565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610aaa565b6102c3565b6040516101129190610dd9565b60405180910390f35b34801561012757600080fd5b5061013061046b565b60405161013d9190610e16565b60405180910390f35b34801561015257600080fd5b5061015b6104c3565b6040516101689190610e16565b60405180910390f35b34801561017d57600080fd5b5061018661051b565b6040516101939190610e78565b60405180910390f35b3480156101a857600080fd5b506101b161053d565b6040516101be9190610df4565b60405180910390f35b3480156101d357600080fd5b506101ee60048036038101906101e99190610aaa565b610612565b6040516101fb9190610e78565b60405180910390f35b34801561021057600080fd5b50610219610636565b6040516102269190610e78565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190610ad7565b61063c565b6040516102639190610dd9565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190610aaa565b610696565b005b61029d6107b1565b005b600281815481106102af57600080fd5b906000526020600020016000915090505481565b60008160008082815481106102db576102da6111fe565b5b906000526020600020015490506001600354826102f89190610f87565b6103029190611068565b431015610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b90610e58565b60405180910390fd5b600080600090505b600186815481106103605761035f6111fe565b5b90600052602060002001805490508110156103d05760018681548110610389576103886111fe565b5b90600052602060002001826040516020016103a5929190610db1565b60405160208183030381529060405280519060200120915080806103c89061111c565b91505061034c565b506000600186815481106103e7576103e66111fe565b5b90600052602060002001805490508260001c610403919061116f565b905060018681548110610419576104186111fe565b5b906000526020600020018181548110610435576104346111fe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16945050505050919050565b606060008054806020026020016040519081016040528092919081815260200182805480156104b957602002820191906000526020600020905b8154815260200190600101908083116104a5575b5050505050905090565b6060600280548060200260200160405190810160405280929190818152602001828054801561051157602002820191906000526020600020905b8154815260200190600101908083116104fd575b5050505050905090565b60006003546003544361052e9190610fdd565b610538919061100e565b905090565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610609578382906000526020600020018054806020026020016040519081016040528092919081815260200182805480156105f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105ab575b505050505081526020019060010190610561565b50505050905090565b6000818154811061062257600080fd5b906000526020600020016000915090505481565b60035481565b6001828154811061064c57600080fd5b90600052602060002001818154811061066457600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060008082815481106106ac576106ab6111fe565b5b906000526020600020015490506001600354826106c99190610f87565b6106d39190611068565b431015610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070c90610e58565b60405180910390fd5b6000610720846102c3565b9050600060028581548110610738576107376111fe565b5b90600052602060002001819055508073ffffffffffffffffffffffffffffffffffffffff166108fc60028681548110610774576107736111fe565b5b90600052602060002001549081150290604051600060405180830381858888f193505050501580156107aa573d6000803e3d6000fd5b5050505050565b662386f26fc100003410156107fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f290610e38565b60405180910390fd5b600061080561051b565b90506000808054905014806108495750806000600160008054905061082a9190611068565b8154811061083b5761083a6111fe565b5b906000526020600020015414155b15610916576000819080600181540180825580915050600190039060005260206000200160009091909190915055600160405180602001604052803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020016000909190919091509060016108e79291906109ee565b5060023490806001815401808255809150506001900390600052602060002001600090919091909150556109eb565b60018080805490506109289190611068565b81548110610939576109386111fe565b5b90600052602060002001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260016002805490506109b99190611068565b815481106109ca576109c96111fe565b5b9060005260206000200160008282546109e39190610f87565b925050819055505b50565b828054828255906000526020600020908101928215610a67579160200282015b82811115610a665782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a0e565b5b509050610a749190610a78565b5090565b5b80821115610a91576000816000905550600101610a79565b5090565b600081359050610aa4816112a4565b92915050565b600060208284031215610ac057610abf611240565b5b6000610ace84828501610a95565b91505092915050565b60008060408385031215610aee57610aed611240565b5b6000610afc85828601610a95565b9250506020610b0d85828601610a95565b9150509250929050565b6000610b238383610b73565b60208301905092915050565b6000610b3b8383610b91565b60208301905092915050565b6000610b538383610ba0565b905092915050565b6000610b678383610d93565b60208301905092915050565b610b7c816110bc565b82525050565b610b8b816110bc565b82525050565b610b9a816110bc565b82525050565b6000610bab82610ed8565b610bb58185610f38565b9350610bc083610e93565b8060005b83811015610bf1578151610bd88882610b17565b9750610be383610f04565b925050600181019050610bc4565b5085935050505092915050565b6000610c0982610ee3565b610c138185610f49565b9350610c1e83610ea3565b8060005b83811015610c5657610c338261122d565b610c3d8882610b2f565b9750610c4883610f11565b925050600181019050610c22565b5085935050505092915050565b6000610c6e82610eee565b610c788185610f54565b935083602082028501610c8a85610eb8565b8060005b85811015610cc65784840389528151610ca78582610b47565b9450610cb283610f1e565b925060208a01995050600181019050610c8e565b50829750879550505050505092915050565b6000610ce382610ef9565b610ced8185610f65565b9350610cf883610ec8565b8060005b83811015610d29578151610d108882610b5b565b9750610d1b83610f2b565b925050600181019050610cfc565b5085935050505092915050565b610d47610d42826110ce565b611165565b82525050565b6000610d5a601f83610f76565b9150610d6582611252565b602082019050919050565b6000610d7d601683610f76565b9150610d888261127b565b602082019050919050565b610d9c816110f8565b82525050565b610dab816110f8565b82525050565b6000610dbd8285610bfe565b9150610dc98284610d36565b6020820191508190509392505050565b6000602082019050610dee6000830184610b82565b92915050565b60006020820190508181036000830152610e0e8184610c63565b905092915050565b60006020820190508181036000830152610e308184610cd8565b905092915050565b60006020820190508181036000830152610e5181610d4d565b9050919050565b60006020820190508181036000830152610e7181610d70565b9050919050565b6000602082019050610e8d6000830184610da2565b92915050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f92826110f8565b9150610f9d836110f8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd257610fd16111a0565b5b828201905092915050565b6000610fe8826110f8565b9150610ff3836110f8565b925082611003576110026111cf565b5b828204905092915050565b6000611019826110f8565b9150611024836110f8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561105d5761105c6111a0565b5b828202905092915050565b6000611073826110f8565b915061107e836110f8565b925082821015611091576110906111a0565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110c7826110d8565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061111561111083611245565b61109c565b9050919050565b6000611127826110f8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561115a576111596111a0565b5b600182019050919050565b6000819050919050565b600061117a826110f8565b9150611185836110f8565b925082611195576111946111cf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006112398254611102565b9050919050565b600080fd5b60008160001c9050919050565b7f4d696e696d756d206265742076616c756520697320302e303120657468657200600082015250565b7f526f756e64206e6f742066696e69736865642079657400000000000000000000600082015250565b6112ad816110f8565b81146112b857600080fd5b5056fea26469706673582212203b397aa5f91250e17fe0ee910b4c08b722e3ffab5146b3f1f646aa991f310d7864736f6c63430008060033";

export class Lottery__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
